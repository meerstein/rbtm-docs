Документация к модулю "Эксперимент"
====================================


Общая информация
~~~~~~~~~~~~~~~~

.. Дописать: Это не совсем то, что требовалось написать. Нет описаний функций с помошью которых реализована вся функциональность. Надо описать все функции в виде: 1.Название, 2. Входные параметры, с типом параметров. 3.Выходные параметры, с типом параметров. Так же добавить информацию о том в каких файлах какие функции написаны. Эту информацию дописать в файл, не в коем случае не удалять уже написанный текс.

Модуль проведения эксперимента запускается по адресу ``109.234.34.140`` с порта ``5001`` и принимает различные виды запросов (каждый вид соответствует конкретному действию на томографе, например *включение/выключение источника излучения*,  *открытие заслонки*  и т.д.). Все URI по которым  принимаются запросы имеют вид ``http://109.234.34.140:5001/tomograph/<номер томографа>/<часть адреса, соответствующая конкретному действию>``.

Пример (функция, включающая источник излучения первого томографа): ``http://109.234.34.140:5001/tomograph/1/source/power-on``. 

**Пока есть только один томограф и он стоит под номером 1, поэтому ниже везде в URI вместо номера томографа будет стоять 1.** 

Список всех действий написан в разделе  `Действия`_ .

Формат запросов и ответов
~~~~~~~~~~~~~~~~~~~~~~~~~

Формат принимаемых запросов и ответов на них
--------------------------------------------

Функции модуля эксперимент принимают запросы типа **GET** и **POST**  (у каждой функции написано какого типа запрос она ожидает, подробнее см. в разделе  `Действия`_.) При вызове функции, принимающей  **POST**  запрос, в теле запроса должна быть **JSON-строка** (нужный формат описан в разделе самих функций).  **Здесь и далее под словом формат запроса/ответа будет подразумеваться формат не самой JSON-строки, а формат python-объекта (int ,  float  или  dict), соответсвующего этой строке.**  Ответ на  **любой**  запрос имеет формат:

.. code-block:: python

   {
       'success': <bool; True, если всё прошло успешно и False, если нет>,
        'error': <str; общее название ошибки, если значение 'success' было False; иначе пустая строка>,
        'exception message': <str; если 'success' было False, то сообщение исключения для более подробного описания проблемы (не всегда что-то написано); иначе пустая строка>,
        'result': <тип зависит от запроса; ответ на запрос, если 'success' было True; иначе None>
   }

Формат поля  ``'result'``  разный для разных функций, он описан отдельно для каждой функции в разделе  `Действия`_.

Формат запросов, посылаемых во время эксперимента
-------------------------------------------------

Также во время эксперимента модуль отправляет запросы хранилищу и странице юстировки. Запросы бывают двух типов - изображения и сообщения (типа "Эксперимент удачно завершён").

.. _experiment-message-request:

Формат запроса с сообщением
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

   {
        'type': <str; 'message' или 'frame'; в данном случае 'message'>,
        'exp_id': <str; идентификатор эксперимента (определение в разделе "Как протекает эксперимент"), пример: '553e898c6c8dc562738e925a'>,
        'message': <str; собственно само сообщение (ниже указаны варианты)>,
        'error': <str; общее сообщение ошибки, если сообщение было об аварийном завершении эксперимента; иначе пустая строка>,
        'exception_message': <str; если сообщение было об аварийном завершении эксперимента, то сообщение исключения для более подробного описания причины (не всегда что-то написано); иначе пустая строка>,
   }

Основное поле  ``'message'``  бывает трёх видов:  ``'Experiment was finished successfully'`` ,  ``'Experiment was emergency stopped'``  и  ``'Experiment was stopped by someone'``. Аварийному завершению эксперимента (и только ему) соответсвует сообщение  ``'Experiment was emergency stopped'``.

Формат запроса с изображением
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

   {
    'type': <str; 'message' или 'frame'; в данном случае 'frame'>,
    'exp_id': <str; идентификатор эксперимента, пример: '553e898c6c8dc562738e925a'>,
    'frame': <dict; изображение с метаданными, формат описан ниже в разделе "Формат изображений">,
   }

.. _experiment-image-info-format:  

Формат информации об изображении
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

То, что возвращается с томографа: формат см. :py:func:`GetFrame()`

Если изображение было получено  **во время эксперимента** , то ко всему этому  **добавляется поле**   ``'number'``  -  ``int``, порядковый номер изображения в эксперименте начиная с 0!!


Действия
~~~~~~~~

Список всех действий:

.. contents::
   :local:

Формат ответа на запрос для разных функций (действий) различается только полем  ``'result'`` (см.  `Формат принимаемых запросов и ответов на них`_ ), поэтому ниже под описаниями действий будет написано  **Поле result**  - значение или формат поля  ``'result'`` в ответе на запрос. Если под описанием действия  **Поле result**  отсутствует, значит оно всегда возвращается равным  ``None``  для этого действия!


Включение/выключение
--------------------
    
Включить томограф
^^^^^^^^^^^^^^^^^

    **URI:**  ``http://109.234.34.140:5001/tomograph/1/source/power-on``

    **Тип запроса:**  GET

    **Описание:**  Проверяет подключение к томографу и включает источник рентгеновского излучения.
    

Выключить томограф
^^^^^^^^^^^^^^^^^^

    **URI:**  ``http://109.234.34.140:5001/tomograph/1/source/power-off``

    **Тип запроса:**  GET

    **Описание:**  Выключает источник рентгеновского излучения.




Элементы юстировки
------------------
    
Открыть заслонку
^^^^^^^^^^^^^^^^^

    **URI:**  ``http://109.234.34.140:5001/tomograph/1/shutter/open/<int, время в секундах t>``

    **Тип запроса:**  GET

    **Описание:**  Открывает заслонку на **t** секунд, кроме случая **t** равное 0, тогда заслонка будет стоять открытой, пока её явно не закроют функцией  `Закрыть заслонку`_.



Закрыть заслонку
^^^^^^^^^^^^^^^^

    **URI:**  ``http://109.234.34.140:5001/tomograph/1/shutter/close/<int, время в секундах t>``

    **Тип запроса:**  GET

    **Описание:**  Закрывает заслонку на **t** секунд, кроме случая **t** равное 0, тогда заслонка будет стоять закрытой, пока её явно не закроют функцией  `Открыть заслонку`_.


Установить новое значение напряжения
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    **URI:**  ``http://109.234.34.140:5001/tomograph/1/source/set-voltage``

    **Тип запроса:**  POST

    **Формат запроса:**
        .. code-block:: python

            <float; новое значение напряжения в кВ>

    **Описание:**  Устанавливает новое значение напряжения (в кВ) в источнике рентгеновского излучения. **Значения округляются!** Например, если придёт значение 5.778 кВ, то оно округлится до значения 6 кВ.

    **Допустимые значения**:  От 2 до 60 кВ.


Установить новое значение тока
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    **URI:**  ``http://109.234.34.140:5001/tomograph/1/source/set-current``

    **Тип запроса:**  POST

    **Формат запроса:**
        .. code-block:: python

            <float; новое значение тока в мА>

    **Описание:**  Устанавливает новое значение тока (в мА) в источнике рентгеновского излучения. **Значения округляются!** Например, если придёт значение 5.778 мА, то оно округлится до значения 6 мА.

    **Допустимые значения**:  От 2 до 80 мА.


Изменить горизонтальное положение
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    **URI:**  ``http://109.234.34.140:5001/tomograph/1/motor/set-horizontal-position``

    **Тип запроса:**  POST

    **Формат запроса:**
        .. code-block:: python

            <float; новое горизонтальное положение объекта непонятно в каких единицах>

    **Описание:**  Устанавливает новое горизонтальное положение объекта (непонятно в каких единицах). **Значения округляются!** Например, если придёт значение 5.778, то оно округлится до значения 6.

    **Допустимые значения**:  Неизвестно.


Изменить вертикальное положение
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    **URI:**  ``http://109.234.34.140:5001/tomograph/1/motor/set-vertical-position``

    **Тип запроса:**  POST

    **Формат запроса:**
        .. code-block:: python

            <float; новое вертикальное положение объекта непонятно в каких единицах>

    **Описание:**  Устанавливает новое вертикальное положение объекта (непонятно в каких единицах). **Значения округляются!** Например, если придёт значение 5.778, то оно округлится до значения 6.

    **Допустимые значения**:  Неизвестно.


Изменить угловое положение
^^^^^^^^^^^^^^^^^^^^^^^^^^

    **URI:**  ``http://109.234.34.140:5001/tomograph/1/motor/set-angle-position``

    **Тип запроса:**  POST

    **Формат запроса:**
        .. code-block:: python

            <float; новое угловое положение объекта в градусах>

    **Описание:**  Устанавливает новое угловое положение объекта (в градусах). **Значения округляются (чуть точнее чем до десятых долей)!**

    **Допустимые значения**:  Нет ограничений.


Принять текущее угловое положение за 0
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    **URI:**  ``http://109.234.34.140:5001/tomograph/1/motor/reset-angle-position``

    **Тип запроса:**  GET

    **Описание:**  Принимает текущее угловое полжение объекта за 0 градусов(кэп).


Снять изображение
^^^^^^^^^^^^^^^^^

    **URI:**  ``http://109.234.34.140:5001/tomograph/1/detector/get-frame``

    **Тип запроса:**  POST



    **Формат запроса:**
        .. code-block:: python

            <float; экспозиция в миллисекундах t>

    **Описание:**  Снимает изображение с экспозицией в **t** миллисекунд. **Значение  округляется до десятых долей!** Например, если придёт значение 5.778 мс, то оно округлится до значения 5.8 мс.

    **Допустимые значения:**  От 0.1 до 16000 мс.

    **Поле result:** dict, изображение, формат такой как описано в разделе  :ref:`experiment-image-info-format`.




Эксперимент
-----------

Начать эксперимент
^^^^^^^^^^^^^^^^^^

    **URI:**  ``http://109.234.34.140:5001/tomograph/1/experiment/begin``

    **Тип запроса:**  POST

    **Формат запроса:**  Зависит от типа эксперимента (простой или продвинутый). В поле  ``'experiment parameters'``  должно быть подполе  ``'advanced'`` , которое определяет "продвинутость" эксперимента. Если оно  ``False`` ( `Простой эксперимент`_), то формат должен иметь вид: 
        .. code-block:: python

            {
                'experiment id': <str; идентфикатор эксперимента, пример: '553e898c6c8dc562738e925a'>,
                'experiment parameters':
                    {
                        'advanced': <bool; "продвинутость" эксперимента, В ДАННОМ СЛУЧАЕ False>,
                        'DARK':
                            {
                                'count': <int; кол-во DARK изображений>,
                                'exposure': <float; экспозиция, с которой снимаются DARK изображения>,
                            },
                        'EMPTY':
                            {
                                'count': <int; кол-во EMPTY изображений>,
                                'exposure': <float; экспозиция, с которой снимаются EMPTY изображения>,
                            },
                        'DATA':
                            {
                                'step count':  <int; кол-во "положений", при одном "положении" изображения снимаются при конкретном положении движка>,
                                'exposure':  <float; экспозиция, с которой снимаются DATA изображения>,
                                'angle step': <float; "угловой шаг", угловое расстояние между двумя "положениями">,
                                'count per step': <int; кол-во DATA изображений, при одном "положении">
                            }
                    },
                # Еще какие-то поля для хранилища
            }
    если  ``'advanced'``  стоит  ``True`` ( `Продвинутый эксперимент`_), то ожидается такой формат:
        .. code-block:: python

            {
                'experiment id': <str; идентфикатор эксперимента, пример: '553e898c6c8dc562738e925a'>,
                'experiment parameters':
                    {
                        'advanced': <bool; "продвинутость" эксперимента, В ДАННОМ СЛУЧАЕ True>,
                        'instruction': <list; список комманд, для последовательного исполнения на томографе>
                            [
                                {'type': 'open shutter', 'args': 0},
                                {'type': 'get frame', 'args': 3.5},
                                {'type': 'go to position', 'args': [0, 0, -1.495]},
                                {'type': 'close shutter', 'args': 0},
                                {'type': 'reset current position', 'args': None},
                            ]
                    },
                # Еще какие-то поля для хранилища
            }

    **Описание:**  Запускает эксперимент с заданными параметрами, предварительно проверив правильность формата запроса и готовность хранилища. Положительный ответ возвращается после того как  **экперимент начался, а не завершился!**  В течение эксперимента модуль отправляет запросы и хранилищу и web-странице юстировки, запросы содержат изображения или сообщения о завершении эксперимента (не всегда успешного). Смысл входных данных и более подробное описание протекания эксперимента написано в разделе  `Как протекает эксперимент`_.


Остановить эксперимент
^^^^^^^^^^^^^^^^^^^^^^

    **URI:**  ``http://109.234.34.140:5001/tomograph/1/experiment/stop``

    **Тип запроса:**  GET

    **Описание:**  Останавливает текущий эксперимент



Как протекает эксперимент
~~~~~~~~~~~~~~~~~~~~~~~~~

Общие вещи
----------

    Про запуск экспримента написано в разделе  `Начать эксперимент`_.

    В общих словах эксперимент проходит примерно так - открылась/закрылась заслонка, как то подвинулся движок, сняли изображение, отправили его хранилищу и web-странице юстировки - и так много раз. При этом к каждому изображению прикрепляется  *идентификатор эксперимента*  - потом в хранилище по этому идентификатору все изображения эксперимента будут собираться в одну папку.

    Как видно в разделе  `Начать эксперимент`_, в входном запросе для запуска эксперимента должны быть поля  ``'experiment id'``  и  ``'experiment parameters'`` (и еще поля для хранилища, будут дописаны потом)). Что они значат?

    * **'experiment id' (str)**           - идентификатор эксперимента, который прикрепляют к изображениям при отправке.
    * **'experiment parameters' (dict)**  - параметры эксперимента, "инструкция", по которой будет проводиться эксперимент. В этой части должно быть поле  ``'advanced'``  - *bool* , определяющий тип эксперимента (простой или продвинутый). Остальные поля уже зависят от "продвинутости" эксперимента и описываются в разделах ниже.


Простой эксперимент
-------------------

    Чтобы понять о чём здесь идёт речь, следует почитать раздел выше  `Общие вещи`_.

    Если в поле  ``'experiment parameters'``  подполе  ``'advanced'``  равен  *False* , то кроме этого подполя должны быть подполя   ``'DARK' (dict)`` ,  ``'EMPTY' (dict)``  и  ``'DATA' (dict)`` (всё это видно в разделе  `Начать эксперимент`_ под пунктом "Формат запроса"). Что значат эти слова?

    В простом эксперименте все изображения делятся на три типа -  *DARK*,  *EMPTY*  и  *DATA*.  *DARK*  - это изображения получаемые при закрытой заслонке,  *EMPTY*  - при открытой заслонке, но отсутствии объекта,  *DARK*  - самые важные изображения - при открытой заслонке и присутствии объекта. В подполях  ``'DARK'``  и  ``'EMPTY'``  есть поля  ``'count' (int)``  и  ``'exposure' (float)``  - соответственно  *сколько*  раз нужно снять изображение и с какой  *экспозицией* (в миллисекундах).

    В подполе  ``'DATA'``  должны быть поля  ``'step count' (int)`` ,  ``'exposure' (float)`` ,  ``'angle step' (float)`` ,  ``'count per step' (int)`` , здесь всё немного сложнее. Мы хотим получить изображения (проекции) объекта со всех сторон, поэтому во время этой части эксперимента объект снимается под одним углом  ``'count per step'``  *раз* , затем объект поворачивают вокруг своей оси на  ``'angle step'``  *градусов*  и снова снимают  ``'count per step'``  *раз*, потом снова поворачивают на тот же угол и снова снимают столько же раз и так далее.  Всё это повторяется  ``'step count'``   *раз* , т.е.  ``'step count'`` - это  *количество*  различных углов, под которыми снимают объект. При этом все изображения получаются с  *экспозицией*  в  ``'exposure'``  мс.

    Осталось написать  **допустимые значения параметров**. Поля  ``'count'`` ,  ``'step count'`` ,  ``'count per step'``  должны быть  **не меньше 0**  (сверху ограничений нет),  ``'exposure'``  должно быть  **от 0.1 до 16000 (включительно)** ,  ``'angle step'``  - может принимать  **любое**  значение.

     **Все значения имеющие тип float округляются (exposure округляется до десятых долей, angle step - чуть точнее этого)!**


 
Продвинутый эксперимент
-----------------------

    Пока не написано:)
